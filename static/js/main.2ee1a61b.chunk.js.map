{"version":3,"sources":["components/Button.js","components/Keyboard.js","components/Display.js","App.js","reducers/displayReducer.js","reducers/validationReducer.js","store.js","serviceWorker.js","index.js"],"names":["Button","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleClick","e","pressKey","displayStatus","displayValue","state","value","stopTimer","startTimer","stopBacklightTimer","changeDisplayBacklight","startBacklightTimer","symbol","content","react_default","a","createElement","className","onClick","Component","connect","dispatch","payload","type","actionName","timerName","timerInterval","timerPeriod","status","actionPayload","Keyboard","button","id","reverse","map","item","components_Button","key","Display","prevProps","validationRequest","sendValidationParam","savedCode","sendPassCode","APIRequest","sendAPICode","backgroundStatus","disabled","lockStatus","displayReducer","error","unlockInit","App","lockHandler","storePassCode","changeDisplayStatus","setTimeout","changeLockStatus","lockApp","unlockHandler","clearValue","unlockApp","relockHandler","errorHandler","unsetRequests","validationRequestHandler","validateInput","serviceHandler","masterHandler","fetch","serviceCode","then","response","json","data","console","log","sn","serial","masterReset","prevState","initializeLock","initializeCheck","locked","matching","initializeReLock","masterCode","initializeAPI","requestInput","components_Display","components_Keyboard","validationReducer","lockCode","initialStateDisplay","arguments","length","undefined","action","objectSpread","initUnlock","initialStateValidation","lockInit","relockInit","checkInit","initAPI","master","timer","START_TIMER","createStore","combineReducers","applyMiddleware","Boolean","window","location","hostname","match","ReactDOM","render","es","store","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2ee1a61b.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nclass Button extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            symbol: this.props.content.symbol,\n            value: this.props.content.value,\n        }\n\n    }\n\n    handleClick = e => {\n        this.props.pressKey({displayStatus: '', displayValue: this.state.value});\n        this.props.stopTimer();\n        this.props.startTimer();\n        this.props.stopBacklightTimer();\n        this.props.changeDisplayBacklight('display__wrapper--active');\n        this.props.startBacklightTimer('');\n    };\n\n    render(){\n       if(this.state.symbol === 'A' || this.state.symbol === 'B') {\n          return (\n            <div className=\"keyboard__button\" onClick={this.handleClick}>\n                <p className=\"text--large align--center\">{this.state.value}</p>\n                <p className=\"keyboard__symbol align--right\">{this.state.symbol}</p>\n            </div>\n          )\n       } else if (this.state.symbol !== '') {\n          return (\n            <div className=\"keyboard__button\" onClick={this.handleClick}>\n                <p className=\"text--large align--center\">{this.state.value}</p>\n                <p className=\"keyboard__symbol align--right\"><i className={\"fas fa-long-arrow-alt-\"+ this.state.symbol}></i></p>\n            </div>\n          )\n       } else {\n          return (\n            <div className=\"keyboard__button\" onClick={this.handleClick}>\n                <p className=\"text--large align--center\">{this.state.value}</p>\n            </div>\n          )\n       }\n    }\n}\nconst mapStateToProps = (state) => state;\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        pressKey: (payload) => dispatch({type: \"PRESS_KEY\", payload:payload}),\n        startTimer:() => dispatch({type: \"START_TIMER\", payload: { actionName: 'PROCESS_INPUT', timerName: 'buttonTimer',timerInterval: 1200, timerPeriod: 1}}),\n        stopTimer: () => dispatch({ type: \"STOP_TIMER\", payload: { timerName: 'buttonTimer'}}),\n        startBacklightTimer:(status) => dispatch({type: \"START_TIMER\", payload:{ actionName: 'CHANGE_DISPLAY_BACKLIGHT', timerName: 'backlightTimer', actionPayload: status, timerInterval: 5000, timerPeriod: 1}}),\n        stopBacklightTimer: () => dispatch({ type: \"STOP_TIMER\", payload: { timerName: 'backlightTimer'}}),\n        changeDisplayBacklight: (status) => dispatch({type: \"CHANGE_DISPLAY_BACKLIGHT\", payload:status})\n\n    }\n};\nexport default connect(mapStateToProps,mapDispatchToProps)(Button);","import React, { Component } from 'react';\nimport Button from './Button';\n\nclass Keyboard extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            button: [\n                {\n                    id: 1,\n                    value: 'L',\n                    symbol: 'A',\n                },\n                {\n                    id: 2,\n                    value: '0',\n                    symbol: '',\n                }\n                ,\n                {\n                    id: 3,\n                    value: '*',\n                    symbol: 'B',\n                }\n                ,\n                {\n                    id: 4,\n                    value: '3',\n                    symbol: '',\n                }\n                ,\n                {\n                    id: 5,\n                    value: '2',\n                    symbol: 'down',\n                }\n                ,\n                {\n                    id: 6,\n                    value: '1',\n                    symbol: '',\n                }\n                ,\n                {\n                    id: 7,\n                    value: '6',\n                    symbol: 'right',\n                }\n                ,\n                {\n                    id: 8,\n                    value: '5',\n                    symbol: '',\n                }\n                ,\n                {\n                    id: 9,\n                    value: '4',\n                    symbol: 'left',\n                }\n                ,\n                {\n                    id: 10,\n                    value: '9',\n                    symbol: '',\n                }\n                ,\n                {\n                    id: 11,\n                    value: '8',\n                    symbol: 'up',\n                }\n                ,\n                {\n                    id: 12,\n                    value: '7',\n                    symbol: '',\n                }\n            ].reverse()\n        };\n    }\n\n    render(){\n        return (\n            <div className=\"keyboard\">\n                {\n                    this.state.button.map((item) =>\n                    <Button key={item.id} content={item} />)\n                }\n            </div>\n        );\n    }\n}\n\nexport default Keyboard;","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nclass Display extends Component {\n\n    componentDidUpdate(prevProps) {\n        if(this.props.validationRequest && prevProps.validationRequest !== this.props.validationRequest) {\n            this.props.sendValidationParam(this.props.displayValue);\n        }\n\n        if(this.props.savedCode !== '' && prevProps.savedCode !== this.props.savedCode) {\n                this.props.sendPassCode(this.props.savedCode);\n        }\n\n        if(this.props.APIRequest && prevProps.APIRequest !== this.props.APIRequest) {\n            this.props.sendAPICode(this.props.displayValue);\n        }\n    }\n\n    render(){\n        if (this.props.displayValue === ''){\n            return (\n                <div className= {\"display__wrapper \" + this.props.backgroundStatus}>\n                    <input className=\"display__input display__input--top text--regular\" disabled={true} value={this.props.lockStatus} type=\"text\"/>\n                    <input className=\"display__input display__input--bottom text--large align--right\" disabled={true} value={this.props.displayStatus} type=\"text\"/>\n                </div>\n            );\n        } else if (this.props.displayValue !== '' && this.props.displayStatus !== '') {\n            return (\n                <div className= {\"display__wrapper \" + this.props.backgroundStatus}>\n                    <input className=\"display__input display__input--top text--regular\" disabled={true} value={this.props.lockStatus} type=\"text\"/>\n                    <input className=\"display__input display__input--bottom text--large align--right\" disabled={true} value={this.props.displayStatus} type=\"text\"/>\n                </div>\n            );\n        } else if (this.props.displayValue !== '') {\n            return (\n                <div className= {\"display__wrapper \" + this.props.backgroundStatus}>\n                    <input className=\"display__input display__input--top text--regular\" disabled={true} value={this.props.lockStatus} type=\"text\"/>\n                    <input className=\"display__input display__input--bottom text--large align--right\" disabled={true} value={this.props.displayValue} type=\"text\"/>\n                </div>\n            )\n        }\n    }\n}\n\nconst mapStateToProps = state => {\n    return  {\n        backgroundStatus : state.displayReducer.backgroundStatus,\n        lockStatus: state.displayReducer.lockStatus,\n        displayStatus: state.displayReducer.displayStatus,\n        displayValue: state.displayReducer.displayValue,\n        savedCode: state.displayReducer.savedCode,\n        error: state.displayReducer.error,\n        unlockInit: state.displayReducer.unlockInit,\n        validationRequest: state.displayReducer.validationRequest,\n        APIRequest: state.displayReducer.APIRequest\n    }\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        changeDisplayBacklight: (status) => dispatch({type: \"CHANGE_DISPLAY_BACKLIGHT\", payload:status}),\n        startBacklightTimer:() => dispatch({type: \"START_TIMER\", payload: { actionName: 'CHANGE_DISPLAY_BACKLIGHT', actionPayload: {}, timerName: 'backlightTimer',timerInterval: 5}}),\n        stopBacklightTimer: () => dispatch({ type: \"STOP_TIMER\", payload: { timerName: 'backlightTimer'}}),\n        sendPassCode: (payload) => dispatch({type: \"SAVE_CODE\", payload: payload}),\n        sendValidationParam: (payload) => dispatch({type: \"VALIDATION\", payload: payload}),\n        sendAPICode: (payload) => dispatch({type:\"GET_API_CODE\",payload: payload})\n    }\n};\n\nexport default connect(mapStateToProps,mapDispatchToProps)(Display)\n","import React, {Component} from 'react';\nimport Keyboard from './components/Keyboard';\nimport Display from './components/Display';\nimport connect from \"react-redux/es/connect/connect\";\n\nclass App extends Component {\n\n    componentDidUpdate(prevProps, prevState) {\n        if(this.props.initializeLock === true && this.props.initializeLock !== prevProps.initializeLock) {\n            this.lockHandler();\n        } else if(this.props.initializeCheck === true && this.props.initializeCheck !== prevProps.initializeCheck) {\n           this.validationRequestHandler();\n        } else if(this.props.error === true && this.props.error !== prevProps.error) {\n            this.errorHandler();\n        } else if (this.props.locked && this.props.matching) {\n            this.unlockHandler();\n        } else if(this.props.initializeReLock === true && this.props.initializeReLock !== prevProps.initializeReLock) {\n            this.validationRequestHandler();\n        } else if (this.props.initializeReLock && this.props.matching) {\n            this.relockHandler();\n        } else if (this.props.masterCode && prevProps.masterCode !== this.props.masterCode) {\n            this.serviceHandler();\n        } else if (this.props.initializeAPI && this.props.serviceCode === '') {\n            this.props.requestInput();\n            console.log('pitaj api');\n        } else if (this.props.initializeAPI && this.props.serviceCode !== '') {\n            this.masterHandler();\n        }\n    };\n\n    lockHandler = () => {\n        this.props.storePassCode();\n        this.props.changeDisplayStatus('Locking...');\n        setTimeout(() => {\n            this.props.changeDisplayStatus('');\n            this.props.changeLockStatus('Locked');\n            this.props.lockApp();\n        },3000);\n    };\n\n    unlockHandler = () => {\n        this.props.changeDisplayStatus('Unlocking...');\n        setTimeout(() => {\n            this.props.clearValue();\n            this.props.changeDisplayStatus('Ready');\n            this.props.changeLockStatus('Unlocked');\n            this.props.unlockApp();\n        },3000);\n    };\n\n    relockHandler = () => {\n        this.props.changeDisplayStatus('Locking...');\n        setTimeout(() => {\n            this.props.changeDisplayStatus('');\n            this.props.changeLockStatus('Locked');\n            this.props.lockApp();\n            this.props.clearValue();\n        },3000);\n    };\n\n    errorHandler = () => {\n        this.props.changeDisplayStatus('Error');\n        this.props.clearValue();\n        this.props.unsetRequests();\n    };\n\n    validationRequestHandler = () => {\n        this.props.changeDisplayStatus('Validating...');\n        setTimeout(() => {\n            this.props.validateInput();\n        },500);\n    };\n\n    serviceHandler = () => {\n        this.props.changeDisplayStatus('Service');\n        this.props.clearValue();\n    };\n\n    masterHandler = () => {\n        this.props.clearValue();\n        this.props.changeDisplayStatus('Validating...');\n        fetch('https://9w4qucosgf.execute-api.eu-central-1.amazonaws.com/default/CR-JS_team_M02a?code='+this.props.serviceCode)\n            .then(response => response.json())\n            .then((data) => {\n                console.log(data.sn);\n                if(data.sn === this.props.serial) {\n                    this.props.masterReset();\n                } else {\n                    this.props.changeDisplayStatus('');\n                }\n            });\n    };\n  render() {\n    return (\n      <div className=\"content\">\n        <Display/>\n        <Keyboard />\n        <p className=\"align--right text--small\">S/N:{this.props.serial}</p>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n    return  {\n        locked: state.validationReducer.locked,\n        initializeLock: state.validationReducer.initializeLock,\n        initializeReLock: state.validationReducer.initializeReLock,\n        initializeCheck: state.validationReducer.initializeCheck,\n        lockCode: state.validationReducer.lockCode,\n        serial: state.validationReducer.serial,\n        error: state.validationReducer.error,\n        matching: state.validationReducer.matching,\n        masterCode: state.validationReducer.masterCode,\n        initializeAPI: state.validationReducer.initializeAPI,\n        serviceCode: state.validationReducer,\n    }\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        changeDisplayBacklight: (status) => dispatch({type: \"CHANGE_DISPLAY_BACKLIGHT\", payload:status}),\n        changeLockStatus: (status) => dispatch({type: \"CHANGE_LOCKED_STATUS\",payload: status}),\n        changeDisplayStatus: (status) => dispatch({type: \"CHANGE_DISPLAY_STATUS\",payload: status}),\n        stopTimer: () => dispatch({ type: \"STOP_TIMER\", payload: { timerName: 'buttonTimer'}}),\n        storePassCode: () => dispatch({type: \"SAVE_PASSCODE\"}),\n        validateInput: () => dispatch({type: \"VALIDATE_INPUT\"}),\n        lockApp: () => dispatch({type: \"LOCK\"}),\n        unlockApp: () => dispatch({type: \"UNLOCK\"}),\n        clearValue: () => dispatch({type: \"CLEAR\"}),\n        unsetRequests: () => dispatch({type: \"UNSET_REQUEST\"}),\n        requestInput: () => dispatch({type: \"GET_API_CODE\"}),\n        masterReset: () => dispatch({type: \"MASTER_RESET\"})\n    }\n};\n\nexport default connect(mapStateToProps,mapDispatchToProps)(App)\n","\nconst initialStateDisplay = {\n    backgroundStatus: '',\n    error: false,\n    lockStatus: 'Unlocked',\n    displayStatus: 'Ready',\n    displayValue: '',\n    savedCode: '',\n    validationRequest: false,\n    APIRequest: false,\n};\n\nconst displayReducer = (state = initialStateDisplay, action) => {\n    switch (action.type) {\n        case \"PRESS_KEY\":\n            let status;\n            let value;\n\n            if(state.displayStatus !== 'Locking...' && state.displayStatus !== 'Validating...' && state.displayStatus !== 'Unlocking...') {\n                status = action.payload.displayStatus;\n                value = action.payload.displayValue;\n            } else {\n                status = state.displayStatus;\n                value = '';\n            }\n\n            state = {\n                ...state,\n                displayStatus: status,\n                displayValue: state.displayValue += value,\n                initUnlock: false\n            };\n            break;\n        case \"CHANGE_DISPLAY_BACKLIGHT\":\n            state = {\n                ...state,\n                backgroundStatus: action.payload\n            };\n            break;\n        case \"CHANGE_LOCKED_STATUS\":\n            state = {\n                ...state,\n                lockStatus: action.payload\n            };\n            break;\n        case \"CHANGE_DISPLAY_STATUS\":\n            state = {\n                ...state,\n                displayStatus: action.payload,\n            };\n            break;\n        case \"SAVE_PASSCODE\":\n            state = {\n                ...state,\n                savedCode: state.displayValue,\n                displayValue: '',\n            };\n            break;\n        case \"VALIDATE_INPUT\":\n            state = {\n                ...state,\n                validationRequest: true,\n                backgroundStatus: 'Validating...'\n            };\n            break;\n        case \"CLEAR\":\n            state = {\n                ...state,\n                displayValue: '',\n                validationRequest: false,\n                savedCode: '',\n                APIRequest: false\n            };\n            break;\n        case \"REQUEST_API\":\n            state = {\n                ...state,\n                APIRequest: true\n            };\n            break;\n        case \"MASTER_RESET\":\n        default:\n            break;\n    }\n    return state;\n};\n\nexport default displayReducer;","\nconst initialStateValidation = {\n    locked: false,\n    initializeLock: false,\n    initializeReLock: false,\n    initializeCheck: false,\n    initializeAPI: false,\n    lockCode: '',\n    serial: '4815162342',\n    matching: false,\n    error: false,\n    masterCode: false,\n    serviceCode: ''\n};\n\nconst validationReducer = (state = initialStateValidation, action) => {\n    switch (action.type) {\n        case \"PROCESS_INPUT\":\n           let lockInit = false;\n           let relockInit = false;\n           let checkInit = false;\n           let initAPI = false;\n\n           if(!state.masterCode) {\n               if (!state.locked && state.lockCode !== '') {\n                   relockInit = true;\n\n               } else if (state.locked === false){\n                   lockInit = true;\n               } else {\n                   checkInit = true;\n               }\n           } else {\n               initAPI = true;\n           }\n\n           state = {\n                ...state,\n                initializeCheck: checkInit,\n                initializeLock: lockInit,\n                initializeReLock: relockInit,\n                initializeAPI: initAPI,\n                error: false,\n                matching: false\n            };\n           break;\n        case \"UNSET_REQUEST\":\n            state = {\n                ...state,\n                initializeLock: false,\n                initializeCheck: false,\n                initializeReLock: false\n            };\n            break;\n        case \"LOCK\":\n            state = {\n                ...state,\n                locked: true,\n                error: false,\n                matching: false,\n            };\n            break;\n         case \"UNLOCK\":\n            state = {\n                ...state,\n                locked: false,\n                error: false,\n                matching: false,\n                masterCode: false\n            };\n            break;\n        case \"SAVE_CODE\" :\n            state = {\n                ...state,\n                lockCode: action.payload\n            };\n        break;\n        case \"VALIDATION\": {\n            let matching;\n            let error;\n            let master;\n            if(state.locked && state.lockCode !== '') {\n                //Unlocking and master unlock matching\n                if(state.lockCode === action.payload){\n                    error = false;\n                    master = false;\n                    matching = true;\n                } else if (action.payload === '000000') {\n                    error = false;\n                    master = true;\n                    matching = false;\n                } else {\n                    error = true;\n                    master = false;\n                    matching = false;\n                }\n            } else if (!state.locked && state.lockCode !== '') {\n                //Re-lock\n                if(state.lockCode === action.payload){\n                    error = false;\n                    master = false;\n                    matching = true;\n                } else {\n                    error = true;\n                    master = false;\n                    matching = false;\n                }\n            }\n\n            state = {\n                ...state,\n                error: error,\n                masterCode: master,\n                matching: matching\n            }\n        };\n        break;\n        case \"GET_API_CODE\":\n            state = {\n                ...state,\n                serviceCode: action.payload\n            };\n            break;\n        default:\n            break;\n    }\n    return state;\n};\n\nexport default validationReducer;\n\n","import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport displayReducer from \"./reducers/displayReducer\";\nimport validationReducer from \"./reducers/validationReducer\";\nimport START_TIMER from 'redux-timer-middleware';\n\nconst timer =  START_TIMER;\nexport default createStore(combineReducers({displayReducer, validationReducer}),{},applyMiddleware(timer));\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './style/app.scss';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport store from './store';\n\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}